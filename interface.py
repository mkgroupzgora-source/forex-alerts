# interface.py
# Streamlit UI: sygna≈Çy RSI + formacje ≈õwiecowe (M15, M30, H1)
# Bez TA‚ÄëLib, dzia≈Ça w chmurze (u≈ºywa "ta" + w≈Çasne regu≈Çy formacji)

import time
from datetime import datetime, timezone
from typing import Dict, List, Tuple

import pandas as pd
import yfinance as yf
import streamlit as st

from ta.momentum import RSIIndicator
from candle_patterns import last_pattern, scan_patterns

# ========= USTAWIENIA =========
PAIRS: List[str] = [
    "EURUSD=X", "GBPUSD=X", "USDCHF=X", "USDJPY=X",
    "AUDUSD=X", "NZDUSD=X", "USDCAD=X", "USDPLN=X",
    # metale/crypto na Yahoo: XAUUSD i XAGUSD bywajƒÖ pod innymi tickerami.
    # Popularne zamienniki:
    # Z≈Çoto (spot): "GC=F" lub "XAUUSD=X" (czasem brak). My spr√≥bujemy oba.
    # Srebro (spot): "SI=F" lub "XAGUSD=X"
]
# zamienniki tickera je≈õli podstawowy nie dzia≈Ça
TICKER_ALIASES: Dict[str, List[str]] = {
    "XAUUSD=X": ["XAUUSD=X", "GC=F"],
    "XAGUSD=X": ["XAGUSD=X", "SI=F"],
}

INTERVALS: Dict[str, Tuple[str, str]] = {
    # nazwa ‚Üí (yfinance interval, okres)
    "M15": ("15m", "7d"),
    "M30": ("30m", "7d"),
    "H1":  ("60m", "30d"),
}

DEFAULT_RSI_BUY = 30
DEFAULT_RSI_SELL = 70

BULLISH_NAMES = {
    "Hammer",
    "Bullish Engulfing",
    "Piercing",
    "Morning Star",
}
BEARISH_NAMES = {
    "Shooting Star",
    "Bearish Engulfing",
    "Dark Cloud Cover",
    "Evening Star",
}


# ========= FUNKCJE POMOCNICZE =========

@st.cache_data(show_spinner=False, ttl=60*10)  # cache 10 min
def fetch_ohlc(symbol: str, yf_interval: str, yf_period: str) -> pd.DataFrame:
    """Pobiera OHLC dla symbolu; pr√≥buje alias√≥w, czy≈õci duplikaty."""
    candidates = TICKER_ALIASES.get(symbol, [symbol])
    last_err = None
    for tick in candidates:
        try:
            df = yf.download(
                tick, interval=yf_interval, period=yf_period, auto_adjust=True, progress=False
            )
            if isinstance(df, pd.DataFrame) and not df.empty:
                df = df[["Open", "High", "Low", "Close"]].copy()
                df = df[~df.index.duplicated(keep="last")]
                df.dropna(inplace=True)
                return df
        except Exception as e:
            last_err = e
            continue
    # pusta ramka jako bezpieczny fallback
    return pd.DataFrame(columns=["Open", "High", "Low", "Close"])


def compute_rsi(df: pd.DataFrame, window: int = 14) -> pd.Series:
    if df is None or df.empty:
        return pd.Series([], dtype="float64")
    rsi = RSIIndicator(close=df["Close"], window=window).rsi()
    return rsi


def evaluate_signal(rsi_val: float, pattern: str, rsi_buy: int, rsi_sell: int) -> str:
    """
    BUY: je≈õli jest formacja bycza i RSI < rsi_buy
    SELL: je≈õli jest formacja nied≈∫wiedzia i RSI > rsi_sell
    NO SIGNAL w pozosta≈Çych przypadkach lub brak danych.
    """
    if pattern:
        # je≈õli w nazwie jest kilka, rozdziel po przecinku
        labels = {p.strip() for p in pattern.split(",") if p.strip()}
        if rsi_val is not None and pd.notna(rsi_val):
            if labels & BULLISH_NAMES and rsi_val < rsi_buy:
                return "BUY"
            if labels & BEARISH_NAMES and rsi_val > rsi_sell:
                return "SELL"
    return "NO SIGNAL"


def analyze_pair_for_interval(symbol: str, interval_name: str, rsi_buy: int, rsi_sell: int) -> dict:
    yf_interval, yf_period = INTERVALS[interval_name]
    df = fetch_ohlc(symbol, yf_interval, yf_period)

    if df.empty:
        return {
            "pair": symbol,
            "interval": interval_name,
            "rsi": None,
            "pattern": "",
            "signal": "NO DATA",
            "updated": datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M UTC"),
        }

    # RSI
    df["RSI"] = compute_rsi(df)
    rsi_val = float(df["RSI"].dropna().iloc[-1]) if not df["RSI"].dropna().empty else None

    # Formacje (ostatnia ≈õwieca)
    patt = last_pattern(df) or ""

    # Sygna≈Ç wg warunku ‚Äûformacja + rsi‚Äù
    sig = evaluate_signal(rsi_val, patt, rsi_buy, rsi_sell)

    # znacznik czasu wg indeksu
    last_ts = df.index[-1]
    if hasattr(last_ts, "tz_localize") or getattr(last_ts, "tzinfo", None) is not None:
        ts_str = last_ts.strftime("%Y-%m-%d %H:%M %Z")
    else:
        ts_str = last_ts.strftime("%Y-%m-%d %H:%M")

    return {
        "pair": symbol,
        "interval": interval_name,
        "rsi": round(rsi_val, 2) if rsi_val is not None else None,
        "pattern": patt,
        "signal": sig,
        "updated": ts_str,
    }


def build_table(pairs: List[str], intervals: List[str], rsi_buy: int, rsi_sell: int) -> pd.DataFrame:
    rows = []
    for p in pairs:
        for itv in intervals:
            rows.append(analyze_pair_for_interval(p, itv, rsi_buy, rsi_sell))
    df = pd.DataFrame(rows)
    # sort: sygna≈Çy na g√≥rƒô, potem para i interwa≈Ç
    sig_order = {"BUY": 0, "SELL": 1, "NO SIGNAL": 2, "NO DATA": 3}
    df["__order"] = df["signal"].map(sig_order).fillna(9)
    df.sort_values(["__order", "pair", "interval"], inplace=True)
    df.drop(columns="__order", inplace=True)
    return df


# ========= UI =========

st.set_page_config(page_title="Forex Alerts ‚Äì Patterns + RSI", layout="wide")

st.title("üìà Forex Alerts ‚Äì Formacje ≈õwiecowe + RSI")
st.caption("Sygna≈Ç pojawia siƒô **tylko** je≈õli jest rozpoznana formacja i RSI spe≈Çnia pr√≥g.")

with st.sidebar:
    st.subheader("Ustawienia")
    rsi_buy = st.number_input("Pr√≥g RSI (BUY, poni≈ºej):", min_value=5, max_value=50, value=DEFAULT_RSI_BUY, step=1)
    rsi_sell = st.number_input("Pr√≥g RSI (SELL, powy≈ºej):", min_value=50, max_value=95, value=DEFAULT_RSI_SELL, step=1)

    chosen_pairs = st.multiselect("Pary:", options=PAIRS, default=PAIRS)
    chosen_itv = st.multiselect("Interwa≈Çy:", options=list(INTERVALS.keys()), default=["M15", "M30", "H1"])

    col_a, col_b = st.columns(2)
    with col_a:
        refresh = st.button("üîÑ Od≈õwie≈º teraz", use_container_width=True)
    with col_b:
        st.write("")  # odstƒôp
        st.caption("Dane cache‚Äôowane 10 min. Od≈õwie≈º wymusza pobranie.")

# Wymuszenie mini‚Äëbusta cache przy od≈õwie≈ºeniu
if refresh:
    # param zale≈ºny od czasu do ‚Äûprze≈Çamania‚Äù cache_data
    st.session_state["__refresh_key"] = time.time()

st.markdown("### üß≠ PrzeglƒÖd sygna≈Ç√≥w")
table = build_table(chosen_pairs, chosen_itv, rsi_buy, rsi_sell)
st.dataframe(
    table.rename(columns={
        "pair": "Para",
        "interval": "Interwa≈Ç",
        "rsi": "RSI",
        "pattern": "Formacja",
        "signal": "Sygna≈Ç",
        "updated": "Aktualizacja"
    }),
    use_container_width=True,
    hide_index=True
)

# Detal po klikniƒôciu ‚Äì proste rozwijane szczeg√≥≈Çy
st.markdown("---")
st.markdown("### üîç Szczeg√≥≈Çy pary")
col1, col2 = st.columns([1, 2])
with col1:
    symbol_pick = st.selectbox("Wybierz parƒô:", options=chosen_pairs)
    itv_pick = st.selectbox("Interwa≈Ç:", options=chosen_itv)

with col2:
    yf_interval, yf_period = INTERVALS[itv_pick]
    df_det = fetch_ohlc(symbol_pick, yf_interval, yf_period)
    if df_det.empty:
        st.warning("Brak danych dla wybranego instrumentu/interwa≈Çu.")
    else:
        df_det = df_det.copy()
        df_det["RSI"] = compute_rsi(df_det)
        patt_series = scan_patterns(df_det)
        last_patt = last_pattern(df_det) or ""
        last_rsi = float(df_det["RSI"].dropna().iloc[-1]) if not df_det["RSI"].dropna().empty else None
        signal = evaluate_signal(last_rsi, last_patt, rsi_buy, rsi_sell)

        st.metric(
            label=f"{symbol_pick} ¬∑ {itv_pick}",
            value=signal,
            help="Sygna≈Ç = formacja + RSI wzglƒôdem prog√≥w"
        )
        st.write(f"**Ostatnia formacja:** {last_patt or '‚Äî'}")
        st.write(f"**Ostatni RSI:** {round(last_rsi,2) if last_rsi is not None else '‚Äî'}")

        st.markdown("#### Ostatnie ≈õwieczki")
        show_n = st.slider("Ile wierszy pokazaƒá:", min_value=20, max_value=300, value=120, step=10)
        view = df_det.tail(show_n)[["Open", "High", "Low", "Close", "RSI"]].copy()
        view.index.name = "Time"
        st.dataframe(view, use_container_width=True)
